#!/usr/bin/env ruby
# frozen_string_literal: true

require "dorian/arguments"
require "git"
require "json"
require "net/http"
require "uri"

TOKEN_FILE = File.join(Dir.home, ".commit")

if File.exist?(TOKEN_FILE)
  TOKEN = File.read(TOKEN_FILE).strip
else
  print "token: "
  TOKEN = gets.strip
  File.write(TOKEN_FILE, TOKEN)
  puts "token written to #{TOKEN_FILE}"
end

parsed = Dorian::Arguments.parse(version: { alias: :v }, help: { alias: :h })

abort parsed.help if parsed.options.help

if parsed.options.version
  abort File.read(File.expand_path("../../VERSION", __FILE__))
end

content = parsed.arguments.join(" ")
content += parsed.files.map { |file| File.read(file) }.join("\n")
content += `git diff --staged`

abort "no staged file" if content.empty?

uri = URI.parse("https://api.openai.com/v1/chat/completions")

http = Net::HTTP.new(uri.host, uri.port)
http.use_ssl = true

request =
  Net::HTTP::Post.new(
    uri.path,
    {
      "Content-Type" => "application/json",
      "Authorization" => "Bearer #{TOKEN}"
    }
  )

request.body = {
  model: "gpt-4o",
  messages: [{ role: "user", content: }]
}.to_json

response = http.request(request)

json = JSON.parse(response.body)

message = json.dig("choices", 0, "message", "content")

if message
  Git.open(".").commit(message)
  puts message
else
  puts JSON.pretty_generate(json)
end
